#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает сведения о внешнем отчете для регистрации отчета как дополнительного.
//
// Возвращаемое значение:
//   Структура - см. ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке()
Функция СведенияОВнешнейОбработке() Экспорт
	
	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();
	ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительныйОтчет();
	ПараметрыРегистрации.Версия = "1.11";
	ПараметрыРегистрации.ОпределитьНастройкиФормы = Ложь;
	ПараметрыРегистрации.Информация = 
		НСтр("ru='Отчет позволяет выявить и пояснить расхождения в показателях декларации 
		|по Налогу на прибыль («Доходы от реализации» + «Внереализационные доходы») 
		|и налоговой базой по НДС за год.'");
	
	НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
	НоваяКоманда.Представление = НСтр("ru = 'Анализ расхождений выручки НДС и Налога на прибыль'");
	НоваяКоманда.Идентификатор = "АнализРасхождений";
	НоваяКоманда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
	НоваяКоманда.ПоказыватьОповещение = Истина;
	НоваяКоманда.Модификатор = "ПечатьMXL";

	Возврат ПараметрыРегистрации;
	
КонецФункции

// Функция формирует отчет и возвращает в виде табличного документа.
//
// Параметры:
//  - Параметры - Структура - Обязательные ключи - Организация, МассивСубконтоПДР и Период.
// Возвращаемое значение:
//  - Табличный документ - Табличный документ с отчетом.
Функция СформироватьОтчет(Параметры) Экспорт
	
	Организация       = Параметры.Организация;
	МассивСубконтоПДР = Параметры.МассивСубконтоПДР;
	Период            = Параметры.Период;
	ТабличныйДокумент = Новый ТабличныйДокумент;
	Макет             = ПолучитьМакет("МакетОтчета");
	
	// Заголовок
	ОбластьЗаголовок      = Макет.ПолучитьОбласть("Заголовок");
	ПредставлениеПериода  = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(НачалоГода(Период), Период);
	СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Организация, Период);
	ОбластьЗаголовок.Параметры.Заполнить(
		Новый Структура("Организация, Период", СведенияОбОрганизации.ПолноеНаименование, ПредставлениеПериода));
	ТабличныйДокумент.Вывести(ОбластьЗаголовок);
	
	// Получим данные регламентированной отчетности.
	Показатели = ПоказателиСверкиДанныхРегламентированныхОтчетов(Организация, НачалоГода(Период), КонецДня(Период));
	Если Показатели.Количество() = 0 Тогда
		// Если данных для отчета нет, то выведем специальную область.
		ОбластьНетДанных = Макет.ПолучитьОбласть("НетДанных");
		ТабличныйДокумент.Вывести(ОбластьНетДанных);
		Возврат ТабличныйДокумент;
	КонецЕсли;
	
	// Получим остальные данные для отчета.
	Периоды = НовыйПериоды(Период);
	ДополнитьПоказателиУчетнымиДанными(Организация, МассивСубконтоПДР, Показатели, Периоды);
	ТаблицаСверкиДанных = ТаблицаСверкиДанныхРегламентированныхОтчетов(Показатели, Периоды);
	
	// Заполним табличный документ из таблицы данных.
	ЗаполнитьТабличныйДокумент(ТабличныйДокумент, ТаблицаСверкиДанных, Периоды, Макет);
	
	// Вернем результат.
	Возврат ТабличныйДокумент;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПолучениеДанныхРегламентированныхОтчетов

Функция ПоказателиСверкиДанныхРегламентированныхОтчетов(Организация, ДатаНачала, ДатаОкончания)
	
	ТаблицаОтчетов = ОтчетыСверкиДанныхРегламентированныхОтчетов(Организация, ДатаНачала, ДатаОкончания);
	
	ТаблицаПоказателей = НоваяТаблицаПоказателейСверкиДанныхРегламентированныхОтчетов();
	
	Для Каждого СтрокаОтчета Из ТаблицаОтчетов Цикл
		ВставитьПоказательВТаблицуСверкиДанныхРегламентированныхОтчетов(ТаблицаПоказателей, СтрокаОтчета);
	КонецЦикла;
	
	Возврат ТаблицаПоказателей
	
КонецФункции

Функция ОтчетыСверкиДанныхРегламентированныхОтчетов(Организация, ДатаНачала, ДатаОкончания)
	
	ТаблицаОтчетов = Новый ТаблицаЗначений;
	ТаблицаОтчетов.Колонки.Добавить("РегламентированныйОтчет");
	ТаблицаОтчетов.Колонки.Добавить("ИсточникОтчета");
	ТаблицаОтчетов.Колонки.Добавить("ВыбраннаяФорма");
	ТаблицаОтчетов.Колонки.Добавить("ПериодДокумента");
	ТаблицаОтчетов.Колонки.Добавить("КодНалоговогоОргана");
	ТаблицаОтчетов.Колонки.Добавить("Вид");
	ТаблицаОтчетов.Колонки.Добавить("МоментВремени");
	ТаблицаОтчетов.Колонки.Добавить("ДатаОтчета");
	ТаблицаОтчетов.Колонки.Добавить("ОтчетныйПериод");
	ТаблицаОтчетов.Колонки.Добавить("Периодичность");
	ТаблицаОтчетов.Колонки.Добавить("ДатаНачала");
	ТаблицаОтчетов.Колонки.Добавить("ДатаОкончания");
	
	ВидыОтчетов = ВидыСверкиДанныхРегламентированныхОтчетов();
	Выборка = РегламентированнаяОтчетность.ВыборкаРегламентированныхОтчетов(Организация, ДатаНачала, ДатаОкончания, ВидыОтчетов);
	ОсновнойКодНалоговогоОргана = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "КодНалоговогоОргана");
	Пока Выборка.Следующий() Цикл
		// Отбираем декларации только для основного кода налоговой органа.
		// Декларации по обособленным подразделениям не учитываем.
		Если Выборка.КодНалоговогоОргана <> ОсновнойКодНалоговогоОргана Тогда
			Продолжить;
		КонецЕсли;
		УсловияПоиска = Новый Структура("ИсточникОтчета, ПериодДокумента, КодНалоговогоОргана");
		ЗаполнитьЗначенияСвойств(УсловияПоиска, Выборка);
		
		СтрокиТаблицыОтчетов = ТаблицаОтчетов.НайтиСтроки(УсловияПоиска);
		
		Если СтрокиТаблицыОтчетов.Количество() = 0 Тогда
			// Отчет еще не учитывался.
			НоваяСтрокаТаблицы = ТаблицаОтчетов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицы, Выборка);
			
		Иначе
			СтрокаТаблицы = СтрокиТаблицыОтчетов[0];
			
			Если СтрСравнить(Выборка.ВыбраннаяФорма, СтрокаТаблицы.ВыбраннаяФорма) > 0 Тогда
				// Поздняя форма отчета вытесняет предшествующие.
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
				
			ИначеЕсли СтрСравнить(Выборка.ВыбраннаяФорма, СтрокаТаблицы.ВыбраннаяФорма) = 0 Тогда
				Если СтрокаТаблицы.РегламентированныйОтчет.СтатусОтчета = "Сдано" И
					Выборка.РегламентированныйОтчет.СтатусОтчета <> "Сдано" Тогда
					Продолжить;
				КонецЕсли;
				
				Если Выборка.Вид > СтрокаТаблицы.Вид Тогда
					// Поздние корректировки вытесняют предшествующие.
					ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
					
				ИначеЕсли Выборка.Вид = СтрокаТаблицы.Вид Тогда
					Если Выборка.МоментВремени.Сравнить(СтрокаТаблицы.МоментВремени) > 0 Тогда
						// Отчеты созданные позже вытесняют предшествующие.
						ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаОтчетов;
	
КонецФункции

Функция ВидыСверкиДанныхРегламентированныхОтчетов()
	
	ВидыОтчетов = Новый Массив;
	
	ВидыОтчетов.Добавить("РегламентированныйОтчетПрибыль");
	ВидыОтчетов.Добавить("РегламентированныйОтчетНДС");
	
	Возврат ВидыОтчетов;
	
КонецФункции

Функция НоваяТаблицаПоказателейСверкиДанныхРегламентированныхОтчетов();
	
	ТипСтрока  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(254));
	ТипСтрока4 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(4));
	ТипДата    = Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты);
	ТипЧисло   = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
	
	ТаблицаПоказателей = Новый ТаблицаЗначений;
	ТаблицаПоказателей.Колонки.Добавить("Показатель", ТипСтрока);
	ТаблицаПоказателей.Колонки.Добавить("ИсточникОтчета", ТипСтрока);
	ТаблицаПоказателей.Колонки.Добавить("ДатаОтчета", ТипДата);
	ТаблицаПоказателей.Колонки.Добавить("РегламентированныйОтчет", ОбщегоНазначения.ОписаниеТипаВсеСсылки());
	ТаблицаПоказателей.Колонки.Добавить("ОтчетныйПериод", ТипДата);
	ТаблицаПоказателей.Колонки.Добавить("КодНалоговогоОргана", ТипСтрока4);
	ТаблицаПоказателей.Колонки.Добавить("Периодичность");
	ТаблицаПоказателей.Колонки.Добавить("ДатаНачала", ТипДата);
	ТаблицаПоказателей.Колонки.Добавить("ДатаОкончания", ТипДата);
	ТаблицаПоказателей.Колонки.Добавить("ПериодДокумента", ТипСтрока);
	ТаблицаПоказателей.Колонки.Добавить("ЗначениеПоказателя", ТипЧисло);
	ТаблицаПоказателей.Колонки.Добавить("Вид", ТипЧисло);
	
	Возврат ТаблицаПоказателей;
	
КонецФункции

Процедура ВставитьПоказательВТаблицуСверкиДанныхРегламентированныхОтчетов(ТаблицаПоказателей, ОписаниеОтчета)
	
	Если ОписаниеОтчета.ИсточникОтчета = "РегламентированныйОтчетПрибыль" Тогда
		ВставитьПоказатели_Прибыль(ТаблицаПоказателей, ОписаниеОтчета);
		
	ИначеЕсли ОписаниеОтчета.ИсточникОтчета = "РегламентированныйОтчетНДС" Тогда
		ВставитьПоказатели_НДС(ТаблицаПоказателей, ОписаниеОтчета);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВставитьПоказатели_Прибыль(ТаблицаПоказателей, ОписаниеОтчета)
	
	СведенияОтчета = ОписаниеОтчета.РегламентированныйОтчет.ДанныеОтчета.Получить();
	
	ЗначениеПоказателя = 0;
	
	Если ОписаниеОтчета.ВыбраннаяФорма = "ФормаОтчета2016Кв4"
		Или ОписаниеОтчета.ВыбраннаяФорма = "ФормаОтчета2015Кв1" Тогда
		
		ЗначениеПоказателя = 0;
		
		Для Каждого Лист Из СведенияОтчета.ДанныеМногостраничныхРазделов.Лист02 Цикл
			ДанныеЛиста = Лист.Данные;
			ЗначениеПоказателя = ЗначениеПоказателя
			                   + ПоказательОтчета(ДанныеЛиста, "П000200001003");
		КонецЦикла;
		
		НоваяСтрока = ТаблицаПоказателей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеОтчета);
		НоваяСтрока.Показатель = "ДоходыОтРеализации";
		НоваяСтрока.ЗначениеПоказателя = ЗначениеПоказателя;
		
		ЗначениеПоказателя = 0;
		
		Для Каждого Лист Из СведенияОтчета.ДанныеМногостраничныхРазделов.Лист02 Цикл
			ДанныеЛиста = Лист.Данные;
			ЗначениеПоказателя = ЗначениеПоказателя
			                   + ПоказательОтчета(ДанныеЛиста, "П000200002003");
		КонецЦикла;
		
		НоваяСтрока = ТаблицаПоказателей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеОтчета);
		НоваяСтрока.Показатель = "ВнереализационныеДоходы";
		НоваяСтрока.ЗначениеПоказателя = ЗначениеПоказателя;
		
		ЗначениеПоказателя = 0;
		
		Для Каждого Лист Из СведенияОтчета.ДанныеМногостраничныхРазделов.Лист02_1 Цикл
			ДанныеЛиста = Лист.Данные;
			ЗначениеПоказателя = ЗначениеПоказателя
			                   + ПоказательОтчета(ДанныеЛиста, "П000210003003");
		КонецЦикла;
		
		НоваяСтрока = ТаблицаПоказателей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеОтчета);
		НоваяСтрока.Показатель = "ВыручкаПоПрочимОперациям";
		НоваяСтрока.ЗначениеПоказателя = ЗначениеПоказателя;
		
		
	ИначеЕсли ОписаниеОтчета.ВыбраннаяФорма = "ФормаОтчета2019Кв4" Тогда 
		
		ЗначениеПоказателя = 0;                         
		
		Для Каждого Лист Из СведенияОтчета.ДанныеМногоуровневыхРазделов.Лист02.Строки Цикл
			ДанныеЛиста = Лист.Данные;
			ЗначениеПоказателя = ЗначениеПоказателя
			+ ПоказательОтчета(ДанныеЛиста, "П000020001003");
		КонецЦикла;
		
		НоваяСтрока = ТаблицаПоказателей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеОтчета);
		НоваяСтрока.Показатель = "ДоходыОтРеализации";
		НоваяСтрока.ЗначениеПоказателя = ЗначениеПоказателя;
		
		ЗначениеПоказателя = 0;
		
		Для Каждого Лист Из СведенияОтчета.ДанныеМногоуровневыхРазделов.Лист02.Строки Цикл
			ДанныеЛиста = Лист.Данные;
			ЗначениеПоказателя = ЗначениеПоказателя
			+ ПоказательОтчета(ДанныеЛиста, "П002000002003");
		КонецЦикла;
		
		НоваяСтрока = ТаблицаПоказателей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеОтчета);
		НоваяСтрока.Показатель = "ВнереализационныеДоходы";
		НоваяСтрока.ЗначениеПоказателя = ЗначениеПоказателя;
		
		ЗначениеПоказателя = 0;
		
		Для Каждого Лист Из СведенияОтчета.ДанныеМногоуровневыхРазделов.Лист02.Строки[0].Строки[0].Строки Цикл
			ДанныеЛиста = Лист.Данные;
			ЗначениеПоказателя = ЗначениеПоказателя
			+ ПоказательОтчета(ДанныеЛиста, "П000210003003");
		КонецЦикла;
		
		НоваяСтрока = ТаблицаПоказателей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеОтчета);
		НоваяСтрока.Показатель = "ВыручкаПоПрочимОперациям";
		НоваяСтрока.ЗначениеПоказателя = ЗначениеПоказателя;
		
	Иначе
		
		ЗначениеПоказателя = 0;                         
		
		Для Каждого Лист Из СведенияОтчета.ДанныеМногостраничныхРазделов.Лист02 Цикл
			ДанныеЛиста = Лист.Данные;
			ЗначениеПоказателя = ЗначениеПоказателя
			+ ПоказательОтчета(ДанныеЛиста, "П002000001003");
		КонецЦикла;
		
		НоваяСтрока = ТаблицаПоказателей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеОтчета);
		НоваяСтрока.Показатель = "ДоходыОтРеализации";
		НоваяСтрока.ЗначениеПоказателя = ЗначениеПоказателя;
		
		ЗначениеПоказателя = 0;
		
		Для Каждого Лист Из СведенияОтчета.ДанныеМногостраничныхРазделов.Лист02 Цикл
			ДанныеЛиста = Лист.Данные;
			ЗначениеПоказателя = ЗначениеПоказателя
			+ ПоказательОтчета(ДанныеЛиста, "П002000002003");
		КонецЦикла;
		
		НоваяСтрока = ТаблицаПоказателей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеОтчета);
		НоваяСтрока.Показатель = "ВнереализационныеДоходы";
		НоваяСтрока.ЗначениеПоказателя = ЗначениеПоказателя;
		
		ЗначениеПоказателя = 0;
		
		Для Каждого Лист Из СведенияОтчета.ДанныеМногостраничныхРазделов.Лист02_1 Цикл
			ДанныеЛиста = Лист.Данные;
			ЗначениеПоказателя = ЗначениеПоказателя
			+ ПоказательОтчета(ДанныеЛиста, "П000210003003");
		КонецЦикла;
		
		НоваяСтрока = ТаблицаПоказателей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеОтчета);
		НоваяСтрока.Показатель = "ВыручкаПоПрочимОперациям";
		НоваяСтрока.ЗначениеПоказателя = ЗначениеПоказателя;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВставитьПоказатели_НДС(ТаблицаПоказателей, ОписаниеОтчета)
	
	СведенияОтчета = ОписаниеОтчета.РегламентированныйОтчет.ДанныеОтчета.Получить();
	
	Раздел3 = СведенияОтчета.ПоказателиОтчета.ПолеТабличногоДокументаРаздел3;
		
	// 18%
	ЗначениеПоказателя = ПоказательОтчета(Раздел3, "П000300001003");
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеОтчета);
	НоваяСтрока.Показатель = "Выручка18";
	НоваяСтрока.ЗначениеПоказателя = ЗначениеПоказателя;
	
	// 10%
	ЗначениеПоказателя = ПоказательОтчета(Раздел3, "П000300002003");
	НоваяСтрока = ТаблицаПоказателей.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеОтчета);
	НоваяСтрока.Показатель = "Выручка10";
	НоваяСтрока.ЗначениеПоказателя = ЗначениеПоказателя;
	
	Раздел4 = СведенияОтчета.ПоказателиОтчета.ПолеТабличногоДокументаРаздел4;
	
	//РеализацияНаЭкспорт
	Если ОписаниеОтчета.ВыбраннаяФорма = "ФормаОтчета2017Кв1" Тогда
		
		ЗначениеПоказателя = ПолучитьСуммуПоказателяРаздел4(Раздел4);
		НоваяСтрока = ТаблицаПоказателей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеОтчета);
		НоваяСтрока.Показатель = "РеализацияНаЭкспорт";
		НоваяСтрока.ЗначениеПоказателя = ЗначениеПоказателя;
		
	ИначеЕсли ОписаниеОтчета.ВыбраннаяФорма = "ФормаОтчета2019Кв1" Тогда
		
		ЗначениеПоказателя = ПолучитьСуммуПоказателяРаздел4(Раздел4);
		НоваяСтрока = ТаблицаПоказателей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеОтчета);
		НоваяСтрока.Показатель = "РеализацияНаЭкспорт";
		НоваяСтрока.ЗначениеПоказателя = ЗначениеПоказателя;
		
	Иначе
		
		ЗначениеПоказателя = ПолучитьСуммуПоказателяРаздел4(Раздел4);
		НоваяСтрока = ТаблицаПоказателей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеОтчета);
		НоваяСтрока.Показатель = "РеализацияНаЭкспорт";
		НоваяСтрока.ЗначениеПоказателя = ЗначениеПоказателя;
	КонецЕсли;
	
КонецПроцедуры

Функция ПоказательОтчета(ИсточникСведений, ИмяПоказателя)
	
	ЗначениеПоказателя = 0;
	
	Если ТипЗнч(ИсточникСведений) = Тип("Структура") Тогда
		Если ИсточникСведений.Свойство(ИмяПоказателя) Тогда
			ЗначениеПоказателя = ИсточникСведений[ИмяПоказателя];
		КонецЕсли;
		
	Иначе
		ВызватьИсключение "Попытка получить значение показателя, сохраненного в неподдерживаемом типе данных";
		
	КонецЕсли;
	
	Возврат ЗначениеПоказателя;
	
КонецФункции

Функция ПолучитьСуммуПоказателяРаздел4(Раздел4);
	
	СуммаПоказателей = 0;
	Для каждого ЭлементСтруктуры из Раздел4 Цикл
		Если СтрНачинаетсяС(ЭлементСтруктуры.Ключ, "П0004М1002003_") Тогда
			СуммаПоказателей = СуммаПоказателей + ?(ЭлементСтруктуры.Значение = "",0,ЭлементСтруктуры.Значение);
		КонецЕсли;
	КонецЦикла;
	Возврат СуммаПоказателей;
	
КонецФункции

Процедура ДополнитьПоказателиУчетнымиДанными(Организация, МассивСубконтоПДР, Показатели, Периоды)

	Для Каждого СтрокаПериода Из Периоды Цикл
		
		ДополнитьПоказателиУчетнымиДаннымиНеподтвержденныйНДС(Организация, Показатели, СтрокаПериода);
		
		Если СтрокаПериода.Накопительный Тогда
			Продолжить;
		КонецЕсли;
		
		ДополнитьПоказателиУчетнымиДаннымиВозвратПоставщику(Организация, Показатели, СтрокаПериода);
		ДополнитьПоказателиУчетнымиДаннымиВозвратОтПокупателя(Организация, Показатели, СтрокаПериода);
		ДополнитьПоказателиУчетнымиДаннымиКорректировкаРеализации(Организация, Показатели, СтрокаПериода);
		ДополнитьПоказателиУчетнымиДаннымиВнереализационныеДоходыНеОблагаемыеНДС(Организация, Показатели, МассивСубконтоПДР, СтрокаПериода);
		ДополнитьПоказателиУчетнымиДаннымиДоходыНеоблагаемыеНДС(Организация, Показатели, СтрокаПериода);
		ДополнитьПоказателиУчетнымиДаннымиДоходыЕНВД(Организация, Показатели, СтрокаПериода);
		ДополнитьПоказателиУчетнымиДаннымиНеПодтвержденнаяРеализация0Совсем(Организация, Показатели, СтрокаПериода);
		ДополнитьПоказателиУчетнымиДаннымиАктуальныеДанныеДекларацииПоПрибыли(Организация, Показатели, СтрокаПериода);
		ДополнитьПоказателиУчетнымиДаннымиБезвозмезднаяПередача(Организация, Показатели, СтрокаПериода);
		ДополнитьПоказателиУчетнымиДаннымиОтгрузкаБезПереходаПраваСобственности(Организация, Показатели, СтрокаПериода);
		ДополнитьПоказателиУчетнымиДаннымиРеализацияОтгруженныхТоваров(Организация, Показатели, СтрокаПериода);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьПоказателиУчетнымиДаннымиВозвратПоставщику(Организация, Показатели, СтрокаПериода)
	
	СтрокаПоказателя = Показатели.Добавить();
	СтрокаПоказателя.ИсточникОтчета = "РазрешенныеРазницы";
	СтрокаПоказателя.Показатель = "ВозвратПоставщику";
	СтрокаПоказателя.ДатаОтчета = СтрокаПериода.ДатаОтчета;
	СтрокаПоказателя.ДатаОкончания = СтрокаПериода.КонецПериода;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачалоПериода", СтрокаПериода.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", Новый Граница(КонецДня(СтрокаПериода.КонецПериода), ВидГраницы.Включая));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	-НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот КАК Сумма
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Организация = &Организация
	|				И СчетФактура ССЫЛКА Документ.ВозвратТоваровПоставщику) КАК НДСЗаписиКнигиПродажОбороты";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтрокаПоказателя.ЗначениеПоказателя = Выборка.Сумма;
	КонецЕсли;

КонецПроцедуры

Процедура ДополнитьПоказателиУчетнымиДаннымиАктуальныеДанныеДекларацииПоПрибыли(Организация, Показатели, СтрокаПериода)
	
	СтрокаПоказателя = Показатели.Добавить();
	СтрокаПоказателя.ИсточникОтчета = "АктуальныеДанные";
	СтрокаПоказателя.Показатель = "АктуальныеДоходыОтРеализации";
	СтрокаПоказателя.ДатаОтчета = СтрокаПериода.ДатаОтчета;
	СтрокаПоказателя.ДатаОкончания = СтрокаПериода.КонецПериода;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Счет", ПланыСчетов.Хозрасчетный.Выручка);
	Запрос.УстановитьПараметр("СчетПрочиеДоходы", ПланыСчетов.Хозрасчетный.ПрочиеДоходы);
	Запрос.УстановитьПараметр("ВидСубконто", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	ВидыПрочихДоходовРасходов = Новый Массив;
	ВидыПрочихДоходовРасходов.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияОсновныхСредств);
	ВидыПрочихДоходовРасходов.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияНематериальныхАктивов);
	Запрос.УстановитьПараметр("ВидыПрочихДоходовРасходов", ВидыПрочихДоходовРасходов);
	Запрос.УстановитьПараметр("НачалоПериода", СтрокаПериода.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", Новый Граница(КонецДня(СтрокаПериода.КонецПериода), ВидГраницы.Включая));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОборотыДтКт.СуммаНУОборотКт КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачалоПериода, &КонецПериода, , , , СчетКт В ИЕРАРХИИ (&Счет), , Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ХозрасчетныйОборотыДтКт.СуммаНУОборотКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			,
	|			,
	|			СчетКт В ИЕРАРХИИ (&СчетПрочиеДоходы),
	|			&ВидСубконто,
	|			Организация = &Организация
	|				И ВЫРАЗИТЬ(СубконтоКт1 КАК Справочник.ПрочиеДоходыИРасходы).ВидПрочихДоходовИРасходов В (&ВидыПрочихДоходовРасходов)) КАК ХозрасчетныйОборотыДтКт";
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	СтрокаПоказателя.ЗначениеПоказателя = ТаблицаЗапроса.Итог("Сумма");
	
	СтрокаПоказателя = Показатели.Добавить();
	СтрокаПоказателя.ИсточникОтчета = "АктуальныеДанные";
	СтрокаПоказателя.Показатель = "АктуальныеВнереализационныеДоходы";
	СтрокаПоказателя.ДатаОтчета = СтрокаПериода.ДатаОтчета;
	СтрокаПоказателя.ДатаОкончания = СтрокаПериода.КонецПериода;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Счет", ПланыСчетов.Хозрасчетный.ПрочиеДоходы);
	Запрос.УстановитьПараметр("ВидСубконто", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	ВидыПрочихДоходовРасходов = Новый Массив;
	ВидыПрочихДоходовРасходов.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияОсновныхСредств);
	ВидыПрочихДоходовРасходов.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияНематериальныхАктивов);
	Запрос.УстановитьПараметр("ВидыПрочихДоходовРасходов", ВидыПрочихДоходовРасходов);
	Запрос.УстановитьПараметр("НачалоПериода", СтрокаПериода.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", Новый Граница(КонецДня(СтрокаПериода.КонецПериода), ВидГраницы.Включая));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОборотыДтКт.СуммаНУОборотКт КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			,
	|			,
	|			СчетКт В ИЕРАРХИИ (&Счет),
	|			&ВидСубконто,
	|			Организация = &Организация
	|				И НЕ ВЫРАЗИТЬ(СубконтоКт1 КАК Справочник.ПрочиеДоходыИРасходы).ВидПрочихДоходовИРасходов В (&ВидыПрочихДоходовРасходов)) КАК ХозрасчетныйОборотыДтКт";
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	СтрокаПоказателя.ЗначениеПоказателя = ТаблицаЗапроса.Итог("Сумма");
	
	СтрокаПоказателя = Показатели.Добавить();
	СтрокаПоказателя.ИсточникОтчета = "АктуальныеДанные";
	СтрокаПоказателя.Показатель = "АктуальныеВыручкаПоПрочимОперациям";
	СтрокаПоказателя.ДатаОтчета = СтрокаПериода.ДатаОтчета;
	СтрокаПоказателя.ДатаОкончания = СтрокаПериода.КонецПериода;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Счет", ПланыСчетов.Хозрасчетный.ПрочиеДоходы);
	Запрос.УстановитьПараметр("ВидСубконто", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	ВидыПрочихДоходовРасходов = Новый Массив;
	ВидыПрочихДоходовРасходов.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияОсновныхСредств);
	ВидыПрочихДоходовРасходов.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.РеализацияНематериальныхАктивов);
	Запрос.УстановитьПараметр("ВидыПрочихДоходовРасходов", ВидыПрочихДоходовРасходов);
	Запрос.УстановитьПараметр("НачалоПериода", СтрокаПериода.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", Новый Граница(КонецДня(СтрокаПериода.КонецПериода), ВидГраницы.Включая));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОборотыДтКт.СуммаНУОборотКт КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			,
	|			,
	|			СчетКт В ИЕРАРХИИ (&Счет),
	|			&ВидСубконто,
	|			Организация = &Организация
	|				И ВЫРАЗИТЬ(СубконтоКт1 КАК Справочник.ПрочиеДоходыИРасходы).ВидПрочихДоходовИРасходов В (&ВидыПрочихДоходовРасходов)) КАК ХозрасчетныйОборотыДтКт";
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	СтрокаПоказателя.ЗначениеПоказателя = ТаблицаЗапроса.Итог("Сумма");
	
КонецПроцедуры

Процедура ДополнитьПоказателиУчетнымиДаннымиВозвратОтПокупателя(Организация, Показатели, СтрокаПериода)
	
	СтрокаПоказателя = Показатели.Добавить();
	СтрокаПоказателя.ИсточникОтчета = "РазрешенныеРазницы";
	СтрокаПоказателя.Показатель = "ВозвратОтПокупателя";
	СтрокаПоказателя.ДатаОтчета = СтрокаПериода.ДатаОтчета;
	СтрокаПоказателя.ДатаОкончания = СтрокаПериода.КонецПериода;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачалоПериода", СтрокаПериода.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", Новый Граница(КонецДня(СтрокаПериода.КонецПериода), ВидГраницы.Включая));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	-НДСПредъявленныйОбороты.СуммаБезНДСПриход КАК Сумма
	|ИЗ
	|	РегистрНакопления.НДСПредъявленный.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Организация = &Организация
	|				И ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Возврат)) КАК НДСПредъявленныйОбороты";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтрокаПоказателя.ЗначениеПоказателя = Выборка.Сумма;
	КонецЕсли;

КонецПроцедуры

Процедура ДополнитьПоказателиУчетнымиДаннымиВнереализационныеДоходыНеОблагаемыеНДС(Организация, Показатели, МассивСубконтоПДР, СтрокаПериода)
	
	СтрокаПоказателя = Показатели.Добавить();
	СтрокаПоказателя.ИсточникОтчета = "РазрешенныеРазницы";
	СтрокаПоказателя.Показатель = "ВнерелизационныеДоходыНеОблагаемыеНДС";
	СтрокаПоказателя.ДатаОтчета = СтрокаПериода.ДатаОтчета;
	СтрокаПоказателя.ДатаОкончания = СтрокаПериода.КонецПериода;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачалоПериода", СтрокаПериода.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", Новый Граница(КонецДня(СтрокаПериода.КонецПериода), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Счета9101", БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ПрочиеДоходы));
	Запрос.УстановитьПараметр("МассивСубконто", МассивСубконтоПДР.ВыгрузитьЗначения());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.СуммаНУОборотКт КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Счет В (&Счета9101),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы),
	|			Организация = &Организация
	|				И Субконто1 В (&МассивСубконто),
	|			,
	|			) КАК ХозрасчетныйОбороты";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтрокаПоказателя.ЗначениеПоказателя = Выборка.Сумма;
	КонецЕсли;

КонецПроцедуры

Процедура ДополнитьПоказателиУчетнымиДаннымиНеподтвержденныйНДС(Организация, Показатели, СтрокаПериода)
	
	Если СтрокаПериода.Накопительный Тогда
		СтрокаПоказателя = Показатели.Добавить();
		СтрокаПоказателя.ИсточникОтчета = "РазрешенныеРазницы";
		СтрокаПоказателя.Показатель = "НеподтвержденныйНДСОстатки";
		СтрокаПоказателя.ДатаОтчета = СтрокаПериода.ДатаОтчета;
		СтрокаПоказателя.ДатаОкончания = СтрокаПериода.ДатаОтчета;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("НачалоПериода", НачалоГода(СтрокаПериода.ДатаОтчета));
		Запрос.УстановитьПараметр("КонецПериода", Новый Граница(КонецДня(СтрокаПериода.ДатаОтчета), ВидГраницы.Включая));
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДСРеализация0Обороты.СуммаБезНДСОборот КАК Сумма
		|ИЗ
		|	РегистрНакопления.НДСРеализация0.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			,
		|			Организация = &Организация
		|				И Состояние <> ЗНАЧЕНИЕ(Перечисление.НДССостоянияРеализация0.ПодтвержденаРеализация0)) КАК НДСРеализация0Обороты";
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			СтрокаПоказателя.ЗначениеПоказателя = Выборка.Сумма;
		КонецЕсли;

	Иначе
		СтрокаПоказателя = Показатели.Добавить();
		СтрокаПоказателя.ИсточникОтчета = "РазрешенныеРазницы";
		СтрокаПоказателя.Показатель = "НеподтвержденныйНДСОбороты";
		СтрокаПоказателя.ДатаОтчета = СтрокаПериода.ДатаОтчета;
		СтрокаПоказателя.ДатаНачала = СтрокаПериода.НачалоПериода;
		СтрокаПоказателя.ДатаОкончания = СтрокаПериода.КонецПериода;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(СтрокаПериода.НачалоПериода));
		Запрос.УстановитьПараметр("КонецПериода", Новый Граница(КонецДня(СтрокаПериода.КонецПериода), ВидГраницы.Включая));
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДСРеализация0Обороты.СуммаБезНДСОборот КАК Сумма
		|ИЗ
		|	РегистрНакопления.НДСРеализация0.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			,
		|			Организация = &Организация
		|				И Состояние <> ЗНАЧЕНИЕ(Перечисление.НДССостоянияРеализация0.ПодтвержденаРеализация0)) КАК НДСРеализация0Обороты";
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			СтрокаПоказателя.ЗначениеПоказателя = Выборка.Сумма;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьПоказателиУчетнымиДаннымиКорректировкаРеализации(Организация, Показатели, СтрокаПериода)
	
	СтрокаПоказателя = Показатели.Добавить();
	СтрокаПоказателя.ИсточникОтчета = "РазрешенныеРазницы";
	СтрокаПоказателя.Показатель = "КорректировкаРеализации";
	СтрокаПоказателя.ДатаОтчета = СтрокаПериода.ДатаОтчета;
	СтрокаПоказателя.ДатаОкончания = СтрокаПериода.КонецПериода;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачалоПериода", СтрокаПериода.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", Новый Граница(КонецДня(СтрокаПериода.КонецПериода), ВидГраницы.Включая));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	-НДСЗаписиКнигиПокупокОбороты.СуммаБезНДСОборот КАК Сумма
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Регистратор,
	|			Организация = &Организация
	|				И СчетУчетаНДС = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСПоУменьшениюСтоимостиРеализации)
	|				И СчетФактура ССЫЛКА Документ.КорректировкаРеализации
	|				И НАЧАЛОПЕРИОДА(СчетФактура.Дата, ГОД) = НАЧАЛОПЕРИОДА(СчетФактура.ДокументРеализации.Дата, ГОД)) КАК НДСЗаписиКнигиПокупокОбороты";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтрокаПоказателя.ЗначениеПоказателя = Выборка.Сумма;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьПоказателиУчетнымиДаннымиДоходыНеоблагаемыеНДС(Организация, Показатели, СтрокаПериода)
	
	СтрокаПоказателя = Показатели.Добавить();
	СтрокаПоказателя.ИсточникОтчета = "РазрешенныеРазницы";
	СтрокаПоказателя.Показатель = "ДоходыНеоблагаемыеНДС";
	СтрокаПоказателя.ДатаОтчета = СтрокаПериода.ДатаОтчета;
	СтрокаПоказателя.ДатаОкончания = СтрокаПериода.КонецПериода;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачалоПериода", СтрокаПериода.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", Новый Граница(КонецДня(СтрокаПериода.КонецПериода), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Счета90011", БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД));
	Запрос.УстановитьПараметр("БезНДС", Перечисления.СтавкиНДС.БезНДС);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.СуммаНУОборотКт КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Счет В (&Счета90011),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС),
	|			Организация = &Организация
	|				И Субконто1 = &БезНДС,
	|			,
	|			) КАК ХозрасчетныйОбороты";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтрокаПоказателя.ЗначениеПоказателя = Выборка.Сумма;
	КонецЕсли;

КонецПроцедуры

Процедура ДополнитьПоказателиУчетнымиДаннымиДоходыЕНВД(Организация, Показатели, СтрокаПериода)
	
	СтрокаПоказателя = Показатели.Добавить();
	СтрокаПоказателя.ИсточникОтчета = "РазрешенныеРазницы";
	СтрокаПоказателя.Показатель = "ДоходыЕНВД";
	СтрокаПоказателя.ДатаОтчета = СтрокаПериода.ДатаОтчета;
	СтрокаПоказателя.ДатаОкончания = СтрокаПериода.КонецПериода;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачалоПериода", СтрокаПериода.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", Новый Граница(КонецДня(СтрокаПериода.КонецПериода), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Счета90012", БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ВыручкаЕНВД));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.СуммаНУОборотКт КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, , Счет В (&Счета90012), , Организация = &Организация, , ) КАК ХозрасчетныйОбороты";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтрокаПоказателя.ЗначениеПоказателя = Выборка.Сумма;
	КонецЕсли;

КонецПроцедуры

Процедура ДополнитьПоказателиУчетнымиДаннымиНеПодтвержденнаяРеализация0Совсем(Организация, Показатели, СтрокаПериода)
	
	СтрокаПоказателя = Показатели.Добавить();
	СтрокаПоказателя.ИсточникОтчета = "РазрешенныеРазницы";
	СтрокаПоказателя.Показатель = "НеподтвержденныйНДС0";
	СтрокаПоказателя.ДатаОтчета = СтрокаПериода.ДатаОтчета;
	СтрокаПоказателя.ДатаОкончания = СтрокаПериода.ДатаОтчета;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоГода(СтрокаПериода.ДатаОтчета));
	Запрос.УстановитьПараметр("КонецПериода", Новый Граница(КонецДня(СтрокаПериода.ДатаОтчета), ВидГраницы.Включая));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот КАК Сумма
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Организация = &Организация
	|				И Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПродажи.НеПодтвержденаСтавка0)) КАК НДСЗаписиКнигиПродажОбороты";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтрокаПоказателя.ЗначениеПоказателя = Выборка.Сумма;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьПоказателиУчетнымиДаннымиБезвозмезднаяПередача(Организация, Показатели, СтрокаПериода)
	
	СтрокаПоказателя = Показатели.Добавить();
	СтрокаПоказателя.ИсточникОтчета = "РазрешенныеРазницы";
	СтрокаПоказателя.Показатель = "БезвозмезднаяПередача";
	СтрокаПоказателя.ДатаОтчета = СтрокаПериода.ДатаОтчета;
	СтрокаПоказателя.ДатаОкончания = СтрокаПериода.КонецПериода;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачалоПериода", СтрокаПериода.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", Новый Граница(КонецДня(СтрокаПериода.КонецПериода), ВидГраницы.Включая));

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	-НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот КАК Сумма
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Организация = &Организация
	|				И СчетФактура ССЫЛКА Документ.ПередачаТоваров) КАК НДСЗаписиКнигиПродажОбороты";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтрокаПоказателя.ЗначениеПоказателя = Выборка.Сумма;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьПоказателиУчетнымиДаннымиОтгрузкаБезПереходаПраваСобственности(Организация, Показатели, СтрокаПериода)
	
	СтрокаПоказателя = Показатели.Добавить();
	СтрокаПоказателя.ИсточникОтчета = "РазрешенныеРазницы";
	СтрокаПоказателя.Показатель = "ОтгрузкаБезПереходаПраваСобственности";
	СтрокаПоказателя.ДатаОтчета = СтрокаПериода.ДатаОтчета;
	СтрокаПоказателя.ДатаОкончания = СтрокаПериода.КонецПериода;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачалоПериода", СтрокаПериода.НачалоПериода);
	Запрос.УстановитьПараметр("ВидОперацииОтгрузкаБезПереходаПраваСобственности", Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности);
	Запрос.УстановитьПараметр("КонецПериода", Новый Граница(КонецДня(СтрокаПериода.КонецПериода), ВидГраницы.Включая));

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	-НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот КАК Сумма
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Организация = &Организация
	|				И СчетФактура ССЫЛКА Документ.РеализацияТоваровУслуг
	|				И СчетФактура.ВидОперации = &ВидОперацииОтгрузкаБезПереходаПраваСобственности) КАК НДСЗаписиКнигиПродажОбороты";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтрокаПоказателя.ЗначениеПоказателя = Выборка.Сумма;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьПоказателиУчетнымиДаннымиРеализацияОтгруженныхТоваров(Организация, Показатели, СтрокаПериода)
	
	СтрокаПоказателя = Показатели.Добавить();
	СтрокаПоказателя.ИсточникОтчета = "РазрешенныеРазницы";
	СтрокаПоказателя.Показатель = "РеализацияОтгруженныхТоваров";
	СтрокаПоказателя.ДатаОтчета = СтрокаПериода.ДатаОтчета;
	СтрокаПоказателя.ДатаОкончания = СтрокаПериода.КонецПериода;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачалоПериода", СтрокаПериода.НачалоПериода);
	Запрос.УстановитьПараметр("Счета9001", БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.Выручка));
	Запрос.УстановитьПараметр("Счета9101", БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.ПрочиеДоходы));
	Запрос.УстановитьПараметр("КонецПериода", Новый Граница(КонецДня(СтрокаПериода.КонецПериода), ВидГраницы.Включая));

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сумма(ХозрасчетныйОбороты.СуммаНУОборотКт) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Регистратор,
	|			Счет В ИЕРАРХИИ (&Счета9001)
	|				ИЛИ Счет В ИЕРАРХИИ (&Счета9101),
	|			,
	|			Организация = &Организация,
	|			,
	|			) КАК ХозрасчетныйОбороты
	|ГДЕ
	|	ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.РеализацияОтгруженныхТоваров";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтрокаПоказателя.ЗначениеПоказателя = Выборка.Сумма;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ТаблицаСверкиДанных

Функция ТаблицаСверкиДанныхРегламентированныхОтчетов(Показатели, Периоды)

	ТаблицаСверкиДанных = Новый ТаблицаЗначений;
	ТаблицаСверкиДанных.Колонки.Добавить("ИмяПоказателя",  ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ТаблицаСверкиДанных.Колонки.Добавить("ИсточникДанных", ОбщегоНазначения.ОписаниеТипаСтрока(30));
	Для Каждого СтрокаПериода Из Периоды Цикл
		ТаблицаСверкиДанных.Колонки.Добавить(СтрокаПериода.ИмяКолонки, ОбщегоНазначения.ОписаниеТипаЧисло(15));
	КонецЦикла;
	ТаблицаСверкиДанных.Индексы.Добавить("ИмяПоказателя");
	
	// Прибыль
	ДобавитьПоказательВидОтчетностиПрибыль(ТаблицаСверкиДанных, Периоды, Показатели);
	ДобавитьПоказательНакопительный(ТаблицаСверкиДанных, "РегламентированныйОтчетПрибыль", "ДоходыОтРеализации", Периоды, Показатели);
	ДобавитьПоказательНакопительный(ТаблицаСверкиДанных, "РегламентированныйОтчетПрибыль", "ВнереализационныеДоходы", Периоды, Показатели);
	ДобавитьПоказательИтоговый(ТаблицаСверкиДанных, "РегламентированныйОтчетПрибыль", "БазаПрибыль");
	ДобавитьПоказательОборотный(ТаблицаСверкиДанных, "АктуальныеДанные", "АктуальныеДоходыОтРеализации", Периоды, Показатели);
	ДобавитьПоказательОборотный(ТаблицаСверкиДанных, "АктуальныеДанные", "АктуальныеВнереализационныеДоходы", Периоды, Показатели);
	ДобавитьПоказательОборотный(ТаблицаСверкиДанных, "АктуальныеДанные", "АктуальныеВыручкаПоПрочимОперациям", Периоды, Показатели);
	// Вставляем после расчета итогов, чтобы прибыль не увеличивалась
	ДобавитьПоказательНакопительный(ТаблицаСверкиДанных, "РегламентированныйОтчетПрибыль", "ВыручкаПоПрочимОперациям", Периоды, Показатели);
	
	// НДС
	ДобавитьПоказательВидОтчетностиНДС(ТаблицаСверкиДанных, Периоды, Показатели);
	ДобавитьПоказательОборотный(ТаблицаСверкиДанных, "РегламентированныйОтчетНДС", "Выручка18", Периоды, Показатели);
	ДобавитьПоказательОборотный(ТаблицаСверкиДанных, "РегламентированныйОтчетНДС", "Выручка10", Периоды, Показатели);
	ДобавитьПоказательОборотный(ТаблицаСверкиДанных, "РегламентированныйОтчетНДС", "РеализацияНаЭкспорт", Периоды, Показатели);
	ДобавитьПоказательИтоговый(ТаблицаСверкиДанных, "РегламентированныйОтчетНДС", "БазаНДС");

	// Разрешенные разницы
	ДобавитьПоказательНеподтвержденныйНДС(ТаблицаСверкиДанных, "РазрешенныеРазницы", "НеподтвержденныйНДС", Периоды, Показатели);
	ДобавитьПоказательОборотный(ТаблицаСверкиДанных, "РазрешенныеРазницы", "ВозвратПоставщику", Периоды, Показатели);
	ДобавитьПоказательОборотный(ТаблицаСверкиДанных, "РазрешенныеРазницы", "ВозвратОтПокупателя", Периоды, Показатели);
	ДобавитьПоказательОборотный(ТаблицаСверкиДанных, "РазрешенныеРазницы", "КорректировкаРеализации", Периоды, Показатели);
	ДобавитьПоказательОборотный(ТаблицаСверкиДанных, "РазрешенныеРазницы", "ВнерелизационныеДоходыНеОблагаемыеНДС", Периоды, Показатели);
	ДобавитьПоказательОборотный(ТаблицаСверкиДанных, "РазрешенныеРазницы", "ДоходыНеоблагаемыеНДС", Периоды, Показатели);
	ДобавитьПоказательОборотный(ТаблицаСверкиДанных, "РазрешенныеРазницы", "ДоходыЕНВД", Периоды, Показатели);
	ДобавитьПоказательОборотный(ТаблицаСверкиДанных, "РазрешенныеРазницы", "НеподтвержденныйНДС0", Периоды, Показатели);
	ДобавитьПоказательОборотный(ТаблицаСверкиДанных, "РазрешенныеРазницы", "БезвозмезднаяПередача", Периоды, Показатели);
	ДобавитьПоказательОборотный(ТаблицаСверкиДанных, "РазрешенныеРазницы", "ОтгрузкаБезПереходаПраваСобственности", Периоды, Показатели);
	ДобавитьПоказательОборотный(ТаблицаСверкиДанных, "РазрешенныеРазницы", "РеализацияОтгруженныхТоваров", Периоды, Показатели);
	
	// Итоги по разрешенным разницам
	МассивПоказателей = Новый Массив;
	МассивПоказателей.Добавить("ВозвратОтПокупателя");
	МассивПоказателей.Добавить("ВозвратПоставщику");
	МассивПоказателей.Добавить("КорректировкаРеализации");
	МассивПоказателей.Добавить("ДоходыНеоблагаемыеНДС");
	МассивПоказателей.Добавить("ДоходыЕНВД");
	МассивПоказателей.Добавить("ВнерелизационныеДоходыНеОблагаемыеНДС");
	МассивПоказателей.Добавить("НеподтвержденныйНДС0");
	МассивПоказателей.Добавить("БезвозмезднаяПередача");
	МассивПоказателей.Добавить("ОтгрузкаБезПереходаПраваСобственности");
	МассивПоказателей.Добавить("РеализацияОтгруженныхТоваров");

	ДобавитьПоказательИтоговыйПоПоказателям(ТаблицаСверкиДанных, "РазрешенныеРазницы", "НеизменныеРазницы", МассивПоказателей);
	МассивПоказателей = Новый Массив;
	МассивПоказателей.Добавить("НеподтвержденныйНДС");
	ДобавитьПоказательИтоговыйПоПоказателям(ТаблицаСверкиДанных, "РазрешенныеРазницы", "ПереходящиеРазницы", МассивПоказателей);

	// Общий итог разрешенных разниц
	ДобавитьПоказательИтоговый(ТаблицаСверкиДанных, "РазрешенныеРазницы", "РазрешенныеРазницыИтог");
	
	// Разница
	ДобавитьПоказательРазница(ТаблицаСверкиДанных);
	
	Возврат ТаблицаСверкиДанных;
	
КонецФункции

Процедура ДобавитьПоказательВидОтчетностиНДС(ТаблицаСверкиДанных, Периоды, Показатели)
	
	СтрокаТаблицы = ТаблицаСверкиДанных.Добавить();
	СтрокаТаблицы.ИмяПоказателя = "НДСВидОтчетности";
	Для Каждого СтрокаПериода Из Периоды Цикл
		Если СтрокаПериода.Накопительный Тогда
			Продолжить;
		КонецЕсли;
		Отбор = Новый Структура("ДатаОкончания, ИсточникОтчета", СтрокаПериода.ДатаОтчета, "РегламентированныйОтчетНДС");
		СтрокаПоказателя = Показатели.НайтиСтроки(Отбор);
		Если СтрокаПоказателя.Количество() > 0 Тогда
			СтрокаТаблицы[СтрокаПериода.ИмяКолонки] = СтрокаПоказателя[0].Вид + 1;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ДобавитьПоказательВидОтчетностиПрибыль(ТаблицаСверкиДанных, Периоды, Показатели)
	
	СтрокаТаблицы = ТаблицаСверкиДанных.Добавить();
	СтрокаТаблицы.ИмяПоказателя = "ПрибыльВидОтчетности";
	Для Каждого СтрокаПериода Из Периоды Цикл
		Если НЕ (СтрокаПериода.ИмяКолонки = "Квартал1" ИЛИ СтрокаПериода.Накопительный) Тогда
			Продолжить;
		КонецЕсли;
		Отбор = Новый Структура("ДатаОкончания, ИсточникОтчета", СтрокаПериода.ДатаОтчета, "РегламентированныйОтчетПрибыль");
		СтрокаПоказателя = Показатели.НайтиСтроки(Отбор);
		Если СтрокаПоказателя.Количество() > 0 Тогда
			СтрокаТаблицы[СтрокаПериода.ИмяКолонки] = СтрокаПоказателя[0].Вид + 1;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ДобавитьПоказательНакопительный(ТаблицаСверкиДанных, ИсточникДанных, ИмяПоказателя, Периоды, Показатели)
	
	СтрокаТаблицы = ТаблицаСверкиДанных.Добавить();
	СтрокаТаблицы.ИмяПоказателя = ИмяПоказателя;
	СтрокаТаблицы.ИсточникДанных = ИсточникДанных;
	МассивПериодовДляРасчета = Новый Массив;
	Для Каждого СтрокаПериода Из Периоды Цикл
		
		Если НЕ (СтрокаПериода.ИмяКолонки = "Квартал1" ИЛИ СтрокаПериода.Накопительный) Тогда
			МассивПериодовДляРасчета.Добавить(СтрокаПериода.ИмяКолонки);
			Продолжить;
		КонецЕсли;
		
		Отбор = Новый Структура("ДатаОкончания, ИсточникОтчета, Показатель", СтрокаПериода.ДатаОтчета, ИсточникДанных, ИмяПоказателя);
		СтрокиПоказателей = Показатели.НайтиСтроки(Отбор);
		Для Каждого СтрокаПоказателя ИЗ СтрокиПоказателей Цикл
			СтрокаТаблицы[СтрокаПериода.ИмяКолонки] = СтрокаТаблицы[СтрокаПериода.ИмяКолонки] + СтрокаПоказателя.ЗначениеПоказателя;
		КонецЦикла;
	КонецЦикла;
	Для Каждого ПериодДляРасчета Из МассивПериодовДляРасчета Цикл
		ПоказателиДляРасчета = Новый Структура("Накопленное, Предыдущее",0,0);
		
		Если ПериодДляРасчета = "Квартал2" Тогда
			ПоказателиДляРасчета.Накопленное = СтрокаТаблицы.Полугодие;
			ПоказателиДляРасчета.Предыдущее = СтрокаТаблицы.Квартал1;
		ИначеЕсли ПериодДляРасчета = "Квартал3" Тогда
			ПоказателиДляРасчета.Накопленное = СтрокаТаблицы.Месяцев9;
			ПоказателиДляРасчета.Предыдущее = СтрокаТаблицы.Полугодие;
		ИначеЕсли ПериодДляРасчета = "Квартал4" Тогда
			ПоказателиДляРасчета.Накопленное = СтрокаТаблицы.Год;
			ПоказателиДляРасчета.Предыдущее = СтрокаТаблицы.Месяцев9;
		КонецЕсли;
		Если ПоказателиДляРасчета.Накопленное = 0 Тогда
			Продолжить;
		КонецЕсли;
		СтрокаТаблицы[ПериодДляРасчета] = ПоказателиДляРасчета.Накопленное - ПоказателиДляРасчета.Предыдущее;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПоказательОборотный(ТаблицаСверкиДанных, ИсточникДанных, ИмяПоказателя, Периоды, Показатели)

	СтрокаТаблицы = ТаблицаСверкиДанных.Добавить();
	СтрокаТаблицы.ИмяПоказателя = ИмяПоказателя;
	СтрокаТаблицы.ИсточникДанных = ИсточникДанных;
	МассивПериодовДляРасчета = Новый Массив;
	Для Каждого СтрокаПериода Из Периоды Цикл
		Если СтрокаПериода.Накопительный Тогда
			МассивПериодовДляРасчета.Добавить(СтрокаПериода.ИмяКолонки);
			Продолжить;
		КонецЕсли;
		
		Отбор = Новый Структура("ДатаОкончания, ИсточникОтчета, Показатель", СтрокаПериода.ДатаОтчета, ИсточникДанных, ИмяПоказателя);
		СтрокиПоказателей = Показатели.НайтиСтроки(Отбор);
		Для Каждого СтрокаПоказателя ИЗ СтрокиПоказателей Цикл
			СтрокаТаблицы[СтрокаПериода.ИмяКолонки] = СтрокаТаблицы[СтрокаПериода.ИмяКолонки] + СтрокаПоказателя.ЗначениеПоказателя;
		КонецЦикла;
	КонецЦикла;
	Для Каждого ПериодДляРасчета Из МассивПериодовДляРасчета Цикл
		ПоказателиДляРасчета = Новый Структура("Слагаемое1, Слагаемое2",0,0);
		
		Если ПериодДляРасчета = "Полугодие" Тогда
			ПоказателиДляРасчета.Слагаемое1 = СтрокаТаблицы.Квартал1;
			ПоказателиДляРасчета.Слагаемое2 = СтрокаТаблицы.Квартал2;
		ИначеЕсли ПериодДляРасчета = "Месяцев9" Тогда
			ПоказателиДляРасчета.Слагаемое1 = СтрокаТаблицы.Полугодие;
			ПоказателиДляРасчета.Слагаемое2 = СтрокаТаблицы.Квартал3;
		ИначеЕсли ПериодДляРасчета = "Год" Тогда
			ПоказателиДляРасчета.Слагаемое1 = СтрокаТаблицы.Месяцев9;
			ПоказателиДляРасчета.Слагаемое2 = СтрокаТаблицы.Квартал4;
		КонецЕсли;

		СтрокаТаблицы[ПериодДляРасчета] = ПоказателиДляРасчета.Слагаемое1 + ПоказателиДляРасчета.Слагаемое2;
	КонецЦикла;

КонецПроцедуры

Процедура ДобавитьПоказательИтоговыйПоПоказателям(ТаблицаСверкиДанных, ИсточникДанных, ИмяПоказателя, МассивПоказателей)
	
	МассивКолонокИсключений = Новый Массив;
	МассивКолонокИсключений.Добавить("ИмяПоказателя");
	МассивКолонокИсключений.Добавить("ИсточникДанных");
	
	МассивСтрок   = ТаблицаСверкиДанных.НайтиСтроки(Новый Структура("ИсточникДанных", ИсточникДанных));
	СтрокаТаблицы = ТаблицаСверкиДанных.Добавить();
	СтрокаТаблицы.ИмяПоказателя = ИмяПоказателя;
	Для Каждого Строка Из МассивСтрок Цикл
		Если МассивПоказателей.Найти(Строка.ИмяПоказателя) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого Колонка Из ТаблицаСверкиДанных.Колонки Цикл
			ИмяКолонки = Колонка.Имя;
			Если МассивКолонокИсключений.Найти(ИмяКолонки) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			СтрокаТаблицы[ИмяКолонки] = СтрокаТаблицы[ИмяКолонки] + Строка[ИмяКолонки];
		КонецЦикла
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПоказательИтоговый(ТаблицаСверкиДанных, ИсточникДанных, ИмяПоказателя)
	
	МассивКолонокИсключений = Новый Массив;
	МассивКолонокИсключений.Добавить("ИмяПоказателя");
	МассивКолонокИсключений.Добавить("ИсточникДанных");
	
	МассивСтрок   = ТаблицаСверкиДанных.НайтиСтроки(Новый Структура("ИсточникДанных", ИсточникДанных));
	СтрокаТаблицы = ТаблицаСверкиДанных.Добавить();
	СтрокаТаблицы.ИмяПоказателя = ИмяПоказателя;
	Для Каждого Строка Из МассивСтрок Цикл
		Для Каждого Колонка Из ТаблицаСверкиДанных.Колонки Цикл
			ИмяКолонки = Колонка.Имя;
			Если МассивКолонокИсключений.Найти(ИмяКолонки) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			СтрокаТаблицы[ИмяКолонки] = СтрокаТаблицы[ИмяКолонки] + Строка[ИмяКолонки];
		КонецЦикла
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПоказательРазница(ТаблицаСверкиДанных)
	
	СтрокаПрибыль = ТаблицаСверкиДанных.НайтиСтроки(Новый Структура("ИмяПоказателя", "БазаПрибыль"))[0];
	СтрокаНДС = ТаблицаСверкиДанных.НайтиСтроки(Новый Структура("ИмяПоказателя", "БазаНДС"))[0];
	СтрокаРазрешенныеРазницы = ТаблицаСверкиДанных.НайтиСтроки(Новый Структура("ИмяПоказателя", "РазрешенныеРазницыИтог"))[0];
	
	СтрокаТаблицы = ТаблицаСверкиДанных.Добавить();
	СтрокаТаблицы.ИмяПоказателя = "Разница";
	МассивКолонокИсключений = Новый Массив;
	МассивКолонокИсключений.Добавить("ИмяПоказателя");
	МассивКолонокИсключений.Добавить("ИсточникДанных");

	Для Каждого Колонка Из ТаблицаСверкиДанных.Колонки Цикл
		ИмяКолонки = Колонка.Имя;
		Если МассивКолонокИсключений.Найти(ИмяКолонки) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЗначениеПоказателя = СтрокаПрибыль[ИмяКолонки] - СтрокаНДС[ИмяКолонки] - СтрокаРазрешенныеРазницы[ИмяКолонки];
		// Делаем округление 1 рубля до 0.
		Если ЗначениеПоказателя = 1 ИЛИ ЗначениеПоказателя = -1 Тогда
			ЗначениеПоказателя = 0;
		КонецЕсли;
		СтрокаТаблицы[ИмяКолонки] = ЗначениеПоказателя;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПоказательНеподтвержденныйНДС(ТаблицаСверкиДанных, ИсточникДанных, ИмяПоказателя, Периоды, Показатели)

	СтрокаТаблицы = ТаблицаСверкиДанных.Добавить();
	СтрокаТаблицы.ИмяПоказателя = ИмяПоказателя;
	СтрокаТаблицы.ИсточникДанных = ИсточникДанных;
	Для Каждого СтрокаПериода Из Периоды Цикл
		
		Если СтрокаПериода.Накопительный Тогда
			Отбор = Новый Структура("ДатаОкончания, ИсточникОтчета, Показатель", СтрокаПериода.ДатаОтчета, ИсточникДанных, "НеподтвержденныйНДСОстатки");
		Иначе
			Отбор = Новый Структура("ДатаОкончания, ИсточникОтчета, Показатель", СтрокаПериода.ДатаОтчета, ИсточникДанных, "НеподтвержденныйНДСОбороты");
		КонецЕсли;
		
		СтрокиПоказателей = Показатели.НайтиСтроки(Отбор);
		
		Для Каждого СтрокаПоказателя ИЗ СтрокиПоказателей Цикл
			СтрокаТаблицы[СтрокаПериода.ИмяКолонки] = СтрокаТаблицы[СтрокаПериода.ИмяКолонки] + СтрокаПоказателя.ЗначениеПоказателя;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ВыводОтчета

Процедура ЗаполнитьТабличныйДокумент(ТабличныйДокумент, ТаблицаСверкиДанных, Периоды, Макет)
	
	// Шапка
	Область = Макет.ПолучитьОбласть("Шапка|Показатель");
	ТабличныйДокумент.Присоединить(Область);
	Область = Макет.ПолучитьОбласть("Шапка|Период");
	Для Каждого СтрокаПериода Из Периоды Цикл
		Область.Параметры.Заполнить(СтрокаПериода);
		ТабличныйДокумент.Присоединить(Область);
	КонецЦикла;
	
	// Декларация по налогу на прибыль
	Область = Макет.ПолучитьОбласть("СтрокаВерхнийУровеньРасшифровка|Показатель");
	Область.Параметры.Показатель = "Декларация по налогу на прибыль";
	Область.Параметры.Расшифровка = "ДекларацияПоНалогуНаПрибыль";
	ТабличныйДокумент.Вывести(Область);
	ВывестиВидОтчетности(Макет, Периоды, ТаблицаСверкиДанных, "ПрибыльВидОтчетности", ТабличныйДокумент);
	
	Область = Макет.ПолучитьОбласть("СтрокаСреднийУровень|Показатель");
	Область.Параметры.Показатель = "Налоговая база по прибыли";
	ТабличныйДокумент.Вывести(Область);
	ВывестиЗначенияПоказателей(Макет, Периоды, "БазаПрибыль", ТаблицаСверкиДанных, ТабличныйДокумент);
	
	Если ЕстьДанныеПоПоказателю("ДоходыОтРеализации", ТаблицаСверкиДанных) Тогда
		Область = Макет.ПолучитьОбласть("СтрокаНижнийУровень|Показатель");
		Область.Параметры.Показатель = "Доходы от реализации" + Символы.ПС + "Лист 02, строка 010";
		ТабличныйДокумент.Вывести(Область);
		ВывестиЗначенияПоказателей(Макет, Периоды, "ДоходыОтРеализации", ТаблицаСверкиДанных, ТабличныйДокумент, Истина,,,Истина);
	КонецЕсли;
	
	Если ЕстьДанныеПоПоказателю("ВнереализационныеДоходы", ТаблицаСверкиДанных) Тогда
		Область = Макет.ПолучитьОбласть("СтрокаНижнийУровень|Показатель");
		Область.Параметры.Показатель = "Внереализационные доходы" + Символы.ПС + "Лист 02, строка 020";
		ТабличныйДокумент.Вывести(Область);
		ВывестиЗначенияПоказателей(Макет, Периоды, "ВнереализационныеДоходы", ТаблицаСверкиДанных, ТабличныйДокумент, Истина,,,Истина);
	КонецЕсли;
	
	Если ЕстьДанныеПоПоказателю("ВыручкаПоПрочимОперациям", ТаблицаСверкиДанных) Тогда
		Область = Макет.ПолучитьОбласть("СтрокаНижнийУровеньКурсив|Показатель");
		Область.Параметры.Показатель = "Выручка по прочим операциям" + Символы.ПС + "Приложение №1 к листу 02, строка 030";
		ТабличныйДокумент.Вывести(Область);
		ВывестиЗначенияПоказателей(Макет, Периоды, "ВыручкаПоПрочимОперациям", ТаблицаСверкиДанных, ТабличныйДокумент, Истина,,,Истина);
	КонецЕсли;
	
	// Декларация по НДС
	Область = Макет.ПолучитьОбласть("СтрокаВерхнийУровеньРасшифровка|Показатель");
	Область.Параметры.Показатель = "Декларация по НДС";
	Область.Параметры.Расшифровка = "ДекларацияПоНДС";
	ТабличныйДокумент.Вывести(Область);
	ВывестиВидОтчетности(Макет, Периоды, ТаблицаСверкиДанных, "НДСВидОтчетности", ТабличныйДокумент);
	
	Область = Макет.ПолучитьОбласть("СтрокаСреднийУровень|Показатель");
	Область.Параметры.Показатель = "Налоговая база по НДС";
	ТабличныйДокумент.Вывести(Область);
	ВывестиЗначенияПоказателей(Макет, Периоды, "БазаНДС", ТаблицаСверкиДанных, ТабличныйДокумент,,Истина);
	
	Если ЕстьДанныеПоПоказателю("Выручка18", ТаблицаСверкиДанных) Тогда
		Это2019Год = Год(Периоды[0].ДатаОтчета) > 2018;
		Область = Макет.ПолучитьОбласть("СтрокаНижнийУровень|Показатель");
		Область.Параметры.Показатель = СтрШаблон("НДС по ставке %1", ?(Это2019Год, "20%", "18%")) + Символы.ПС + "Раздел 3, строка 010";
		ТабличныйДокумент.Вывести(Область);
		ВывестиЗначенияПоказателей(Макет, Периоды, "Выручка18", ТаблицаСверкиДанных, ТабличныйДокумент, Истина, Истина);
	КонецЕсли;
	
	Если ЕстьДанныеПоПоказателю("Выручка10", ТаблицаСверкиДанных) Тогда
		Область = Макет.ПолучитьОбласть("СтрокаНижнийУровень|Показатель");
		Область.Параметры.Показатель = "НДС по ставке 10%" + Символы.ПС + "Раздел 3, строка 020";
		ТабличныйДокумент.Вывести(Область);
		ВывестиЗначенияПоказателей(Макет, Периоды, "Выручка10", ТаблицаСверкиДанных, ТабличныйДокумент, Истина, Истина);
	КонецЕсли;
	
	Если ЕстьДанныеПоПоказателю("РеализацияНаЭкспорт", ТаблицаСверкиДанных) Тогда
		Область = Макет.ПолучитьОбласть("СтрокаНижнийУровень|Показатель");
		Область.Параметры.Показатель = "Подтвержденная реализация на экспорт" + Символы.ПС + "Раздел 4, строка 020";
		ТабличныйДокумент.Вывести(Область);
		ВывестиЗначенияПоказателей(Макет, Периоды, "РеализацияНаЭкспорт", ТаблицаСверкиДанных, ТабличныйДокумент, Истина, Истина);
	КонецЕсли;
	
	// Разрешенные разницы
	Область = Макет.ПолучитьОбласть("СтрокаВерхнийУровень|Показатель");
	Область.Параметры.Показатель = "Разрешенные разницы";
	ТабличныйДокумент.Вывести(Область);
	ВывестиЗначенияПоказателей(Макет, Периоды, "РазрешенныеРазницыИтог", ТаблицаСверкиДанных, ТабличныйДокумент,,,Ложь);
	
	Область = Макет.ПолучитьОбласть("СтрокаСреднийУровень|Показатель");
	Область.Параметры.Показатель = "Переходящие разницы";
	ТабличныйДокумент.Вывести(Область);
	ВывестиЗначенияПоказателей(Макет, Периоды, "ПереходящиеРазницы", ТаблицаСверкиДанных, ТабличныйДокумент,,,Ложь);
	
//	TODO Если ЕстьДанныеПоПоказателю("НеподтвержденныйНДС", ТаблицаСверкиДанных) Тогда
		Область = Макет.ПолучитьОбласть("СтрокаНижнийУровеньВопрос|Показатель");
		Область.Параметры.Показатель = "Реализация по ставке 0%," + Символы.ПС + "ожидающая подтверждения";
		Область.Параметры.ПодсказкаПоказателя = "ПодсказкаНеподтвержденныйНДС";
		ТабличныйДокумент.Вывести(Область);
		ВывестиЗначенияПоказателей(Макет, Периоды, "НеподтвержденныйНДС", ТаблицаСверкиДанных, ТабличныйДокумент, Истина,,Ложь);
//	КонецЕсли;
	
	Область = Макет.ПолучитьОбласть("СтрокаСреднийУровень|Показатель");
	Область.Параметры.Показатель = "Неизменные разницы";
	ТабличныйДокумент.Вывести(Область);
	ВывестиЗначенияПоказателей(Макет, Периоды, "НеизменныеРазницы", ТаблицаСверкиДанных, ТабличныйДокумент,,,Ложь);
	
	Если ЕстьДанныеПоПоказателю("ВозвратПоставщику", ТаблицаСверкиДанных) Тогда
		Область = Макет.ПолучитьОбласть("СтрокаНижнийУровень|Показатель");
		Область.Параметры.Показатель = "Возвраты товаров поставщику";
		ТабличныйДокумент.Вывести(Область);
		ВывестиЗначенияПоказателей(Макет, Периоды, "ВозвратПоставщику", ТаблицаСверкиДанных, ТабличныйДокумент, Истина,,Ложь);
	КонецЕсли;
	
	//Область = Макет.ПолучитьОбласть("СтрокаНижнийУровень|Показатель");
	//Область.Параметры.Показатель = "Корректировка поступления" + Символы.ПС + "(в сторону уменьшения)";
	//ТабличныйДокумент.Вывести(Область);
	//ВывестиЗначенияПоказателей(Макет, Периоды, "КорректировкаПоступления", ТаблицаСверкиДанных, ТабличныйДокумент, Истина,,Ложь);
	
	Если ЕстьДанныеПоПоказателю("ВозвратОтПокупателя", ТаблицаСверкиДанных) Тогда
		Область = Макет.ПолучитьОбласть("СтрокаНижнийУровень|Показатель");
		Область.Параметры.Показатель = "Возвраты товаров от покупателей";
		ТабличныйДокумент.Вывести(Область);
		ВывестиЗначенияПоказателей(Макет, Периоды, "ВозвратОтПокупателя", ТаблицаСверкиДанных, ТабличныйДокумент, Истина,,Ложь);
	КонецЕсли;
	
	Если ЕстьДанныеПоПоказателю("КорректировкаРеализации", ТаблицаСверкиДанных) Тогда
		Область = Макет.ПолучитьОбласть("СтрокаНижнийУровень|Показатель");
		Область.Параметры.Показатель = "Корректировка реализации текущего года"+ Символы.ПС + "(в сторону уменьшения)";
		ТабличныйДокумент.Вывести(Область);
		ВывестиЗначенияПоказателей(Макет, Периоды, "КорректировкаРеализации", ТаблицаСверкиДанных, ТабличныйДокумент, Истина,,Ложь);
	КонецЕсли;
	
	Если ЕстьДанныеПоПоказателю("ДоходыНеоблагаемыеНДС", ТаблицаСверкиДанных) Тогда
		Область = Макет.ПолучитьОбласть("СтрокаНижнийУровень|Показатель");
		Область.Параметры.Показатель = "Доходы (90.01.1)," + Символы.ПС + "не облагаемые НДС";
		ТабличныйДокумент.Вывести(Область);
		ВывестиЗначенияПоказателей(Макет, Периоды, "ДоходыНеоблагаемыеНДС", ТаблицаСверкиДанных, ТабличныйДокумент, Истина,,Ложь);
	КонецЕсли;
	
	Если ЕстьДанныеПоПоказателю("ДоходыЕНВД", ТаблицаСверкиДанных) Тогда
		Область = Макет.ПолучитьОбласть("СтрокаНижнийУровень|Показатель");
		Область.Параметры.Показатель = "Доходы ЕНВД/Патент (90.01.2)";
		ТабличныйДокумент.Вывести(Область);
		ВывестиЗначенияПоказателей(Макет, Периоды, "ДоходыЕНВД", ТаблицаСверкиДанных, ТабличныйДокумент, Истина,,Ложь);
	КонецЕсли;
	
	Если ЕстьДанныеПоПоказателю("ВнерелизационныеДоходыНеОблагаемыеНДС", ТаблицаСверкиДанных) Тогда
		Область = Макет.ПолучитьОбласть("СтрокаНижнийУровень|Показатель");
		Область.Параметры.Показатель = "Внереализационные доходы (91.01)," + Символы.ПС + "не облагаемые НДС";
		ТабличныйДокумент.Вывести(Область);
		ВывестиЗначенияПоказателей(Макет, Периоды, "ВнерелизационныеДоходыНеОблагаемыеНДС", ТаблицаСверкиДанных, ТабличныйДокумент, Истина,,Ложь);
	КонецЕсли;
	
	Если ЕстьДанныеПоПоказателю("НеподтвержденныйНДС0", ТаблицаСверкиДанных) Тогда
		Область = Макет.ПолучитьОбласть("СтрокаНижнийУровень|Показатель");
		Область.Параметры.Показатель = "Не подтвержденная реализация 0%";
		ТабличныйДокумент.Вывести(Область);
		ВывестиЗначенияПоказателей(Макет, Периоды, "НеподтвержденныйНДС0", ТаблицаСверкиДанных, ТабличныйДокумент, Истина,,Ложь);
	КонецЕсли;
	
	Если ЕстьДанныеПоПоказателю("БезвозмезднаяПередача", ТаблицаСверкиДанных) Тогда
		Область = Макет.ПолучитьОбласть("СтрокаНижнийУровень|Показатель");
		Область.Параметры.Показатель = "Безвозмездная передача";
		ТабличныйДокумент.Вывести(Область);
		ВывестиЗначенияПоказателей(Макет, Периоды, "БезвозмезднаяПередача", ТаблицаСверкиДанных, ТабличныйДокумент, Истина,,Ложь);
	КонецЕсли;
	
	Если ЕстьДанныеПоПоказателю("ОтгрузкаБезПереходаПраваСобственности", ТаблицаСверкиДанных) Тогда
		Область = Макет.ПолучитьОбласть("СтрокаНижнийУровень|Показатель");
		Область.Параметры.Показатель = "Отгрузка без перехода" + Символы.ПС + "права собственности";
		ТабличныйДокумент.Вывести(Область);
		ВывестиЗначенияПоказателей(Макет, Периоды, "ОтгрузкаБезПереходаПраваСобственности", ТаблицаСверкиДанных, ТабличныйДокумент, Истина,,Ложь);
	КонецЕсли;
	
	Если ЕстьДанныеПоПоказателю("РеализацияОтгруженныхТоваров", ТаблицаСверкиДанных) Тогда
		Область = Макет.ПолучитьОбласть("СтрокаНижнийУровень|Показатель");
		Область.Параметры.Показатель = "Реализация ранее" + Символы.ПС + "отгруженных товаров";
		ТабличныйДокумент.Вывести(Область);
		ВывестиЗначенияПоказателей(Макет, Периоды, "РеализацияОтгруженныхТоваров", ТаблицаСверкиДанных, ТабличныйДокумент, Истина,,Ложь);
	КонецЕсли;
	
	// Разница
	Область = Макет.ПолучитьОбласть("СтрокаВерхнийУровень|Показатель");
	Область.Параметры.Показатель = "Разница";
	ТабличныйДокумент.Вывести(Область);
	ВывестиРазницу(Макет, Периоды, "Разница", ТаблицаСверкиДанных, ТабличныйДокумент);
	
	ТабличныйДокумент.ФиксацияСлева = 3;

КонецПроцедуры

Процедура ВывестиЗначенияПоказателей(Макет, Периоды, Показатель, ТаблицаСверкиДанных, ТабличныйДокумент, ЭтоРасшифровка = Ложь, Оборотный = Ложь, ВыделятьЦветом = Истина, ПроверитьАктуальныеДанные = Ложь)
	
	Если ЭтоРасшифровка Тогда
		Область = Макет.ПолучитьОбласть("СтрокаНижнийУровень|Период");
	Иначе
		Область = Макет.ПолучитьОбласть("СтрокаСреднийУровень|Период");
	КонецЕсли;
	ЦветПоУмолчанию = Область.ТекущаяОбласть.ЦветТекста;
	СтрокаПоказателя = ТаблицаСверкиДанных.НайтиСтроки(Новый Структура("ИмяПоказателя", Показатель))[0];
	Если ЭтоРасшифровка И ПроверитьАктуальныеДанные Тогда
		СтрокаАктуальныхДанных = ТаблицаСверкиДанных.НайтиСтроки(Новый Структура("ИмяПоказателя", "Актуальные" + Показатель))[0];
	КонецЕсли;
	
	Для Каждого СтрокаПериода Из Периоды Цикл
		ЗначениеПоказателя = СтрокаПоказателя[СтрокаПериода.ИмяКолонки];
		Если ЭтоРасшифровка И ПроверитьАктуальныеДанные Тогда
			ЗначениеАктуальныхДанных = СтрокаАктуальныхДанных[СтрокаПериода.ИмяКолонки];
			Разница = ЗначениеПоказателя - ЗначениеАктуальныхДанных;
			Разница = ?(Разница < 0, -Разница, Разница);
			Если Разница = 0 Или Разница = 1 Тогда
				Область = Макет.ПолучитьОбласть("СтрокаНижнийУровень|Период");
			Иначе
				Область = Макет.ПолучитьОбласть("СтрокаНижнийУровеньСРисунком|Период");
				Область.Параметры.Расшифровка = Новый Структура("Имя, Период, ЗначениеПоказателя, ЗначениеАктуальныхДанных", Показатель, СтрокаПериода.ИмяКолонки, ЗначениеПоказателя, ЗначениеАктуальныхДанных);
			КонецЕсли;
		КонецЕсли;
		Область.ТекущаяОбласть.ЦветТекста = ЦветПоУмолчанию;
		Если СтрокаПериода.ИмяКолонки <> "Квартал1" И ВыделятьЦветом Тогда
			Если Оборотный И СтрокаПериода.Накопительный Тогда
				Область.ТекущаяОбласть.ЦветТекста = WebЦвета.СветлоСерый;
			ИначеЕсли НЕ Оборотный И НЕ СтрокаПериода.Накопительный Тогда
				Область.ТекущаяОбласть.ЦветТекста = WebЦвета.СветлоСерый;
			КонецЕсли;
		КонецЕсли;
		
		Область.Параметры.ЗначениеПоказателя = ЗначениеПоказателя;
		ТабличныйДокумент.Присоединить(Область);
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиВидОтчетности(Макет, Периоды, ТаблицаСверкиДанных, Показатель, ТабличныйДокумент)
	
	Область = Макет.ПолучитьОбласть("СтрокаВерхнийУровень|Период");
	СтрокаПоказателя = ТаблицаСверкиДанных.НайтиСтроки(Новый Структура("ИмяПоказателя", Показатель))[0];
	ЦветПоУмолчанию = Область.ТекущаяОбласть.ЦветТекста;
	Для Каждого СтрокаПериода Из Периоды Цикл
		ЗначениеПоказателя = СтрокаПоказателя[СтрокаПериода.ИмяКолонки];
		Если ЗначениеПоказателя = 0 Тогда
			ЗначениеПоказателя = "Расчетный";
		ИначеЕсли ЗначениеПоказателя = 1 Тогда
			ЗначениеПоказателя = "Первичный";
		Иначе
			ЗначениеПоказателя = "К/" + (ЗначениеПоказателя - 1);
		КонецЕсли;
		Если ЗначениеПоказателя = "Расчетный" Тогда
			Область.ТекущаяОбласть.ЦветТекста = WebЦвета.СветлоСерый;
		Иначе
			Область.ТекущаяОбласть.ЦветТекста = ЦветПоУмолчанию;
		КонецЕсли;
		Область.Параметры.ЗначениеПоказателя = ЗначениеПоказателя;
		ТабличныйДокумент.Присоединить(Область);
	КонецЦикла;

КонецПроцедуры

Процедура ВывестиРазницу(Макет, Периоды, Показатель, ТаблицаСверкиДанных, ТабличныйДокумент)
	
	СтрокаПоказателя = ТаблицаСверкиДанных.НайтиСтроки(Новый Структура("ИмяПоказателя", Показатель))[0];
	Для Каждого СтрокаПериода Из Периоды Цикл
		ЗначениеПоказателя = СтрокаПоказателя[СтрокаПериода.ИмяКолонки];
		
		Если ЗначениеПоказателя <> 0 Тогда
			Область = Макет.ПолучитьОбласть("СтрокаВерхнийУровеньСРисунком|Период");
			Область.Параметры.Расшифровка = "Разница";
		Иначе
			Область = Макет.ПолучитьОбласть("СтрокаВерхнийУровень|Период");
		КонецЕсли;
		
		Область.Параметры.ЗначениеПоказателя = ЗначениеПоказателя;
		ТабличныйДокумент.Присоединить(Область);
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

Функция НовыйПериоды(Знач Период)
	
	Периоды = Новый ТаблицаЗначений;
	Периоды.Колонки.Добавить("ИмяПериода", ОбщегоНазначения.ОписаниеТипаСтрока(20));
	Периоды.Колонки.Добавить("ИмяКолонки", ОбщегоНазначения.ОписаниеТипаСтрока(20));
	Периоды.Колонки.Добавить("ДатаОтчета", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	Периоды.Колонки.Добавить("НачалоПериода", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	Периоды.Колонки.Добавить("КонецПериода", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	Периоды.Колонки.Добавить("Накопительный", Новый ОписаниеТипов("Булево"));
	Период = КонецКвартала(Период);
	
	НачалоГода = НачалоГода(Период);
	
	Для НомерКвартала = 1 По 4 Цикл
		Квартал = КонецКвартала(ДобавитьМесяц(НачалоГода, 3 * НомерКвартала)-1);
		Если Квартал <= Период Тогда
			ИмяПериода = СтрШаблон("%1 квартал", НомерКвартала);
			ИмяКолонки = СтрШаблон("Квартал%1", НомерКвартала);
			СтрокаПериода = Периоды.Добавить();
			СтрокаПериода.ИмяПериода = ИмяПериода;
			СтрокаПериода.ИмяКолонки = ИмяКолонки;
			СтрокаПериода.ДатаОтчета = Квартал;
			СтрокаПериода.НачалоПериода = НачалоКвартала(Квартал);
			СтрокаПериода.КонецПериода  = КонецКвартала(Квартал);
		Иначе
			Прервать;
		КонецЕсли;
		Если НомерКвартала = 2 Тогда
			СтрокаПериода = Периоды.Добавить();
			СтрокаПериода.ИмяПериода = "Полугодие";
			СтрокаПериода.ИмяКолонки = "Полугодие";
			СтрокаПериода.ДатаОтчета = Квартал;
			СтрокаПериода.Накопительный = Истина;
		ИначеЕсли НомерКвартала = 3 Тогда
			СтрокаПериода = Периоды.Добавить();
			СтрокаПериода.ИмяПериода = "9 месяцев";
			СтрокаПериода.ИмяКолонки = "Месяцев9";
			СтрокаПериода.ДатаОтчета = Квартал;
			СтрокаПериода.Накопительный = Истина;
		ИначеЕсли НомерКвартала = 4 Тогда
			СтрокаПериода = Периоды.Добавить();
			СтрокаПериода.ИмяПериода = "Год";
			СтрокаПериода.ИмяКолонки = "Год";
			СтрокаПериода.ДатаОтчета = Квартал;
			СтрокаПериода.Накопительный = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Периоды;
	
КонецФункции

Функция ЕстьДанныеПоПоказателю(Показатель, ТаблицаСверкиДанных)
	
	СтрокаПоказателя = ТаблицаСверкиДанных.НайтиСтроки(Новый Структура("ИмяПоказателя", Показатель))[0];
	ЕстьДанные = Ложь;
	Для Каждого Колонка Из ТаблицаСверкиДанных.Колонки Цикл
		Если ТипЗнч(СтрокаПоказателя[Колонка.Имя]) = Тип("Число") И СтрокаПоказателя[Колонка.Имя] <> 0 Тогда
			ЕстьДанные = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат ЕстьДанные;
	
КонецФункции

#КонецОбласти

#КонецЕсли